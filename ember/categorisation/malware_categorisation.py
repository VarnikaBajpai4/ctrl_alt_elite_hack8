import json
import os
import google.generativeai as genai
from dotenv import load_dotenv  

load_dotenv()

genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

with open("/Users/varnikabajpai/Desktop/Gajshield/bad.exe_analysis_report.json", "r") as f:
    malware_data = json.load(f)


prompt = f"""
You are a world-class malware analyst AI specialized in static analysis, malware classification, and behavioral profiling.

You will be given a JSON-formatted malware analysis report, including (but not limited to):
- YARA rule matches (rule names and tags)
- Imported API calls or system functions
- File metadata (hashes, filename)
- Registry key indicators, strings, shellcode tags, or section names

Your tasks:
1. Parse the JSON input and identify:
   - Any suspicious or malicious behavior based on API calls (e.g., registry manipulation, process injection, privilege escalation, evasion, etc.).
   - What the YARA rule names and matched keywords suggest about the malware.
   - Any other key features suggesting the malwares objective or tactics.

2. Use that behavioral analysis to assign a probability (in %) that the file belongs to each of the following malware families:

   ["Trojan Family", 
    "Backdoor and C2", 
    "Info Stealers", 
    "Exploitation and Execution Techniques", 
    "Payload Delivery & Infection Vectors", 
    "System Disruption Malware", 
    "Botnet / Worm / Beaconing"]

3. The output must be a list of top four dicts, **sorted by descending probability**, where each dict contains:
   - `family`: Malware family name
   - `probability`: A float percentage (e.g., 42.5)
   - `rationale`: A short explanation (1-2 lines max) why this probability is assigned, referring to behavior, imports, and YARA rules

Example Output Format:
[
  {{
    "family": "Info Stealers",
    "probability": 41.7,
    "rationale": "YARA rule RustyStealer_Detect and registry-related APIs strongly suggest credential and token theft."
  }},
  ...
]

Now analyze the following malware file:

{json.dumps(malware_data, indent=2)}
"""

model = genai.GenerativeModel("gemini-1.5-flash")

response = model.generate_content(prompt)


print("Analysis Output:\n")
print(response.text)
